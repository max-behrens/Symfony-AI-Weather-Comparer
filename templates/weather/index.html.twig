{% extends 'base.html.twig' %}

{% block title %}Weather Forecast{% endblock %}

{% block body %}
<div class="mx-auto p-20 dark:bg-gray-900 dark:text-white min-h-screen">
    <h1 class="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-gray-100">Forecast Fluctuation API</h1>
    
    <!-- Search Card -->
    <div class="bg-white border border-gray-200 rounded-xl shadow-md p-6 mb-8 dark:bg-gray-800 dark:border-gray-700">
        <h1 class="text-2xl font-extrabold mb-4 text-gray-800 dark:text-white">Weather Forecast</h1>
        
        {% if error is defined %}
            <div class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
                {{ error }}
            </div>
        {% endif %}
        
        {{ form_start(formFind, {
            'method': 'GET',
            'action': path('weather_index')
        }) }}
            <div class="mb-4">
                {{ form_row(formFind.city, {'attr': {'placeholder': 'Enter city name', 'class': 'mt-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200'}}) }}
            </div>
            {{ form_widget(formFind.submit, {'attr': {'class': 'text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none'}}) }}
        {{ form_end(formFind) }}
    </div>

        <!-- Loading Spinner - Hidden by default -->
    <div id="loading-spinner" class="hidden absolute bg-gray-900 bg-opacity-50 flex items-center justify-center z-50" style="top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100%; height: 100%;">
        <div class="text-center">
            <div class="inline-block h-16 w-16 animate-spin rounded-full border-4 border-solid border-blue-600 border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]" role="status">
                <span class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>
            </div>
            <p class="mt-4 text-white font-semibold">Loading weather data...</p>
        </div>
    </div>

    {% set city = city is defined ? city : '' %}
    
    {% if showResults is defined and showResults %}
        <!-- Forecast Results Section -->
        <div id="weatherForecastResults" class="mb-8">
            <h2 id="forecastTitle" class="text-2xl font-bold mb-4 text-gray-800 dark:text-white">Daily Average Forecast for {{ city }}</h2>
            
            <div id="forecastContainer" class="flex flex-wrap gap-4 w-full">
                {% for forecast in forecasts %}
                    <div class="flex-1 min-w-[280px] max-w-[300px] bg-white border border-gray-200 rounded-lg shadow-md dark:bg-gray-800 dark:border-gray-700 p-5">
                        <h4 class="mb-2 text-lg font-bold tracking-tight text-gray-900 dark:text-white">{{ forecast.time }}</h4>
                        <div class="font-normal text-gray-700 dark:text-gray-400">
                            <p class="flex items-center py-1"><span class="font-medium w-28">Temperature:</span> {{ forecast.temperature|number_format(2) }}Â°C</p>
                            <p class="flex items-center py-1"><span class="font-medium w-28">Feels Like:</span> {{ forecast.feels_like|number_format(2) }}Â°C</p>
                            <p class="flex items-center py-1"><span class="font-medium w-28">Humidity:</span> {{ forecast.humidity }}%</p>
                            <p class="flex items-center py-1"><span class="font-medium w-28">Pressure:</span> {{ forecast.pressure }} hPa</p>
                        </div>
                    </div>
                {% endfor %}
            </div>

        </div>
        
        <!-- Weather Analysis Results -->
        <div id="weatherCalculationResults" class="space-y-6">
            <div class="p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                <h2 class="mb-4 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Temperature Analysis</h2>
                <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Rate of Change Between Each Day: {{ temperatureChanges|join(', ') }}</p>
                <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Overall Temperature Volatility: {{ averageTemperatureChanges }}</p>
                <div class="p-4 mt-4 text-sm text-gray-800 rounded-lg bg-gray-50 dark:bg-gray-700 dark:text-gray-300">
                    <h3 class="text-lg font-semibold">OpenAI Explanation:</h3>
                    <p>{{ temperatureExplanation }}</p>
                </div>
            </div>

            <div class="p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                <h2 class="mb-4 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Humidity Analysis</h2>
                <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Rate of Change Between Each Day: {{ humidityChanges|join(', ') }}</p>
                <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Overall Humidity Volatility: {{ averageHumidityChanges }}</p>
                <div class="p-4 mt-4 text-sm text-gray-800 rounded-lg bg-gray-50 dark:bg-gray-700 dark:text-gray-300">
                    <h3 class="text-lg font-semibold">OpenAI Explanation:</h3>
                    <p>{{ humidityExplanation }}</p>
                </div>
            </div>

            <div class="p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                <h2 class="mb-4 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Pressure Analysis</h2>
                <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Rate of Change Between Each Day: {{ pressureChanges|join(', ') }}</p>
                <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Overall Pressure Volatility: {{ averagePressureChanges }}</p>
                <div class="p-4 mt-4 text-sm text-gray-800 rounded-lg bg-gray-50 dark:bg-gray-700 dark:text-gray-300">
                    <h3 class="text-lg font-semibold">OpenAI Explanation:</h3>
                    <p>{{ pressureExplanation }}</p>
                </div>
            </div>
            
            <!-- Save Form -->
            {{ form_start(formSave, {'attr': {'id': 'weather_form', 'action': path('calculation_create', {
                'city': city,
                'temperatureChanges': temperatureChanges|join(','),
                'averageTemperatureChanges': averageTemperatureChanges,
                'humidityChanges': humidityChanges|join(','),
                'averageHumidityChanges': averageHumidityChanges,
                'pressureChanges': pressureChanges|join(','),
                'averagePressureChanges': averagePressureChanges,
                'temperatureExplanation': temperatureExplanation,
                'humidityExplanation': humidityExplanation,
                'pressureExplanation': pressureExplanation,
            })}}) }}

            <div style="display:none;">
                {{ form_widget(formSave.calculations, {'value': ''}) }}
                {{ form_widget(formSave.aiResponse, {'value': ''}) }}
                {{ form_widget(formSave.country, {'value': ''}) }}
            </div>

            <!-- Updated save button to match the blue style -->
            {{ form_widget(formSave.save, {'attr': {'class': 'mt-4 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none'}}) }}
            {{ form_end(formSave) }}
        </div>
    {% endif %}

    <!-- Chatbot Component -->
    <div class="fixed bottom-5 right-5 mt-12 z-50">
        <!-- Chatbot Toggle Button -->
        <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 focus:outline-none chatbot-toggle">
            ðŸ’¬ Chat with AI
        </button>

        <!-- Chatbot Window -->
        <div class="bg-white border border-gray-200 rounded-lg shadow-md p-4 w-96 chatbot-window hidden dark:bg-gray-800 dark:border-gray-700">
            <div class="flex justify-between items-center border-b border-gray-200 pb-3">
                <h4 class="text-xl font-bold text-gray-900 dark:text-white">Chatbot</h4>
                <button class="text-gray-400 hover:text-gray-900 focus:outline-none chatbot-close">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
            
            <!-- Chat Messages -->
            <div class="chatbot-messages h-72 overflow-y-auto p-3 space-y-3 dark:bg-gray-700 dark:text-gray-300">
                <!-- Messages will be inserted here by JavaScript -->
            </div>

            <!-- Chat Input Field -->
            <div class="mt-3 flex">
                <input type="text" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-l-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 chatbot-input dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200" placeholder="Type a message..." />
                <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-r-lg text-sm px-5 py-2.5 focus:outline-none chatbot-send">Send</button>
            </div>
        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
    // Prepare data directly from Twig variables
    const city = "{{ city|default('') }}";
    const calculationData = {
        temperatureChanges: {{ temperatureChanges|default([])|json_encode|raw }},
        averageTemperatureChanges: {{ averageTemperatureChanges|default(0)|json_encode|raw }},
        humidityChanges: {{ humidityChanges|default([])|json_encode|raw }},
        averageHumidityChanges: {{ averageHumidityChanges|default(0)|json_encode|raw }},
        pressureChanges: {{ pressureChanges|default([])|json_encode|raw }},
        averagePressureChanges: {{ averagePressureChanges|default(0)|json_encode|raw }},
        temperatureExplanation: {{ temperatureExplanation|default('No explanation available')|json_encode|raw }},
        humidityExplanation: {{ humidityExplanation|default('No explanation available')|json_encode|raw }},
        pressureExplanation: {{ pressureExplanation|default('No explanation available')|json_encode|raw }}
    };

     // Fix text wrapping in forecast blocks
    const forecastBlocks = document.querySelectorAll('#forecastContainer > div');
    forecastBlocks.forEach(block => {
        // Apply word-break and overflow-wrap to ensure text wraps properly
        block.style.wordBreak = 'break-word';
        block.style.overflowWrap = 'break-word';
        
        // Apply the same to all paragraph elements inside
        const paragraphs = block.querySelectorAll('p');
        paragraphs.forEach(p => {
            p.style.wordBreak = 'break-word';
            p.style.overflowWrap = 'break-word';
        });
    });
    
    // Reposition spinner to center of main content area
    const spinner = document.getElementById('loading-spinner');
    if (spinner) {
        // Remove fixed positioning and inset-0 classes
        spinner.classList.remove('fixed', 'inset-0');
        
        // Add new positioning classes
        spinner.classList.add('absolute');
        
        // Update the spinner's style
        spinner.style.position = 'absolute';
        spinner.style.top = '50%';
        spinner.style.left = '50%';
        spinner.style.transform = 'translate(-50%, -50%)';
        spinner.style.width = '100%';
        spinner.style.height = '100%';
        
        // Find the main content div (which has the dark:bg-gray-900 class)
        const mainContent = document.querySelector('.dark\\:bg-gray-900');
        if (mainContent) {
            // Set the main content to position relative to contain the absolute spinner
            mainContent.style.position = 'relative';
            
            // Move the spinner element inside the main content if it's not already there
            if (spinner.parentNode !== mainContent) {
                mainContent.appendChild(spinner);
            }
        }
    }


 // Get the form element
    const weatherSearchForm = document.querySelector('form[action*="weather_index"]');
    const loadingSpinner = document.getElementById('loading-spinner');
    
    console.log('Form found:', weatherSearchForm ? 'Yes' : 'No');
    console.log('Spinner found:', loadingSpinner ? 'Yes' : 'No');
    
    if (weatherSearchForm) {
        console.log('Adding submit event listener to form');
        
        // Add both submit and click handlers for redundancy
        weatherSearchForm.addEventListener('submit', showSpinner);
        
        // Also add a click handler on the submit button
        const submitButton = weatherSearchForm.querySelector('button[type="submit"]');
        if (submitButton) {
            console.log('Submit button found, adding click listener');
            submitButton.addEventListener('click', showSpinner);
        } else {
            // Try to find the submit button by its class
            const altSubmitButton = weatherSearchForm.querySelector('input[type="submit"], button.btn-primary');
            if (altSubmitButton) {
                console.log('Alternative submit button found, adding click listener');
                altSubmitButton.addEventListener('click', showSpinner);
            }
        }
    }
    
    function showSpinner(event) {
        console.log('Form submit/button click detected!');
        if (loadingSpinner) {
            console.log('Showing spinner...');
            loadingSpinner.classList.remove('hidden');
            loadingSpinner.style.display = 'flex'; // Force display as flex
        } else {
            console.error('Loading spinner element not found!');
        }
    }
    
    // Also add a fallback for when the page is unloading
    window.addEventListener('beforeunload', function(e) {
        // Don't show on browser back/forward
        if (document.activeElement && 
            (document.activeElement.type === 'submit' || 
             document.activeElement.tagName === 'BUTTON')) {
            console.log('Page unloading due to button click, showing spinner');
            if (loadingSpinner) loadingSpinner.classList.remove('hidden');
        }
    });


    // Chatbot input and toggle elements
    const chatInput = document.querySelector('.chatbot-input');
    const chatbotMessages = document.querySelector('.chatbot-messages');
    var isChatbotOpen = false;

    // Toggle chatbot visibility
    document.querySelector('.chatbot-toggle').addEventListener('click', toggleChatbot);
    document.querySelector('.chatbot-close').addEventListener('click', toggleChatbot);

    function toggleChatbot() {
        document.querySelector('.chatbot-window').classList.toggle('hidden');
        isChatbotOpen = !isChatbotOpen;
        console.log('Chatbot open:', isChatbotOpen);
    }

    // Handle sending a message
    document.querySelector('.chatbot-send').addEventListener('click', sendMessage);
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });
    

    async function sendMessage() {
        if (!chatInput || chatInput.value.trim() === "") return;

        const userMessage = chatInput.value;
        console.log('User message:', userMessage);
        addMessageToChat(userMessage, true);
        chatInput.value = '';

        try {
            // Send the message to the AI service
            const aiResponse = await askAI(userMessage, city, calculationData);
            console.log('AI response:', aiResponse);

            // Display AI response
            addMessageToChat(aiResponse, false);

        } catch (error) {
            console.error("Chatbot AI Error:", error);
            addMessageToChat("Error: Unable to get AI response.", false);
        }
    }

    // Add a message to the chat window
    function addMessageToChat(message, isUser = false) {
        const messageElement = document.createElement('div');
        messageElement.className = isUser ? 'flex justify-end' : 'flex justify-start';
        messageElement.innerHTML = `
            <div class="${isUser ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-900'} 
                max-w-xs p-3 rounded-lg ${isUser ? 'rounded-br-none' : 'rounded-bl-none'}">
                ${message}
            </div>`;
        chatbotMessages.appendChild(messageElement);
        chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    // Call the AI API
    async function askAI(userInput, city = '', calculationResults = {}) {
        const url = '/api/ask-openai';

        const requestData = {
            user_input: userInput,
            city: city,
            calculationResults: calculationResults
        };

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(requestData)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('AI Response received:', data);

            return data.aiResponse || 'No response received from AI';
        } catch (error) {
            console.error('Fetch error:', error);
            return 'Error: Unable to get AI response.';
        }
    }

    // Add form submission handler
    const weatherForm = document.querySelector('#weather_form');
    if (weatherForm) {
        weatherForm.addEventListener('submit', function(event) {
            // Get the chatbot messages content
            const chatbotMessages = Array.from(document.querySelectorAll('.chatbot-messages div'))
                .map(msg => msg.innerText) // Get the inner text of all message elements
                .join('\n'); // Join them with a newline separator

            // Get the current action path
            let actionUrl = event.target.getAttribute('action');
            
            // Add chatbotMessages as a query parameter to the action URL
            const urlWithChatbotMessages = new URL(actionUrl, window.location.origin);
            urlWithChatbotMessages.searchParams.append('chatbotMessages', chatbotMessages);

            // Update the form's action attribute with the new URL
            event.target.setAttribute('action', urlWithChatbotMessages.toString());
        });
    }
});
</script>
{% endblock %}